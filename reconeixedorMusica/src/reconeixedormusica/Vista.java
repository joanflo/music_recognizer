
package reconeixedormusica;

import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 * Finestra principal & missatges
 * @author Bernat i Joan
 */
public class Vista extends javax.swing.JFrame {

    private final static String NEW_LINE = "\n";//constant per canviar de linia
    
    private Controlador controlador = null;
    private javax.swing.JFileChooser fileChooser;
    private ImageIcon caratulaPerDefecte;
    
    
    /**
     * Crea i inicialitza els components de la finestra
     * @param controlador controlador del MVC
     */
    public Vista(Controlador controlador) {
        this.controlador = controlador;
        ArrayList<Canso> llistaCansons = controlador.llegirLlistaCansons("info_musica.txt");
        fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);//no es pot seleccionar més d'un arxiu
        initComponents();
        initBarraReproduccio();
        initTaula();
        setIcones();
        setBotonsReproductor();
        asignarControladorAlsEsdeveniments();
        actualitzarTaulaCansons(llistaCansons);
        informarUsuari("Programa iniciat correctament");
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelLlista = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCansons = new javax.swing.JTable();
        buttonEliminarCanso = new javax.swing.JButton();
        panelReproductor = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        panelReproduccio = new javax.swing.JPanel();
        panelBotonsReproduccio = new javax.swing.JPanel();
        buttonPlayPause = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        panelBarraReproduccio = new javax.swing.JPanel();
        barraReproduccio = new javax.swing.JSlider();
        labelTemps = new javax.swing.JLabel();
        panelCaratula = new javax.swing.JPanel();
        labelCaratula = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        buttonAfegirCanso = new javax.swing.JButton();
        labelNom = new javax.swing.JLabel();
        labelGrup = new javax.swing.JLabel();
        labelAlbum = new javax.swing.JLabel();
        labelGenere = new javax.swing.JLabel();
        labelAny = new javax.swing.JLabel();
        labelInfoNom = new javax.swing.JLabel();
        labelInfoGrup = new javax.swing.JLabel();
        labelInfoAlbum = new javax.swing.JLabel();
        labelInfoGenere = new javax.swing.JLabel();
        labelInfoAny = new javax.swing.JLabel();
        panelComparador = new javax.swing.JPanel();
        panelGrafics = new javax.swing.JPanel();
        labelGrafics = new javax.swing.JLabel();
        panelGravacio = new javax.swing.JPanel();
        buttonGravar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaProcessos = new javax.swing.JTextArea();
        buttonComparar = new javax.swing.JButton();
        labelComparar = new javax.swing.JLabel();
        comboBoxQueComparar = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuOpcions = new javax.swing.JMenu();
        opcioObrirCanso = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        opcioObrirJavadoc = new javax.swing.JMenuItem();
        opcioObrirManual = new javax.swing.JMenuItem();
        opcioInfoPrograma = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        opcioSortirPrograma = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reconeixedor cançons");
        setName("finestraPrincipal"); // NOI18N
        setResizable(false);

        panelLlista.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cançons enmagatzemades"));
        panelLlista.setPreferredSize(new java.awt.Dimension(530, 557));

        tableCansons.setAutoCreateRowSorter(true);
        tableCansons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom cançó", "Grup", "Àlbum", "Any", "Duració"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableCansons.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tableCansons);

        buttonEliminarCanso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reconeixedormusica/icones/eliminar.png"))); // NOI18N
        buttonEliminarCanso.setText("Eliminar");

        javax.swing.GroupLayout panelLlistaLayout = new javax.swing.GroupLayout(panelLlista);
        panelLlista.setLayout(panelLlistaLayout);
        panelLlistaLayout.setHorizontalGroup(
            panelLlistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLlistaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLlistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .addComponent(buttonEliminarCanso, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        panelLlistaLayout.setVerticalGroup(
            panelLlistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLlistaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(buttonEliminarCanso)
                .addContainerGap())
        );

        panelReproductor.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Reproductor"));
        panelReproductor.setPreferredSize(new java.awt.Dimension(500, 248));

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        panelReproduccio.setPreferredSize(new java.awt.Dimension(300, 100));

        buttonPlayPause.setBorder(null);
        buttonPlayPause.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonPlayPause.setMaximumSize(new java.awt.Dimension(65, 65));
        buttonPlayPause.setMinimumSize(new java.awt.Dimension(50, 50));
        buttonPlayPause.setPreferredSize(new java.awt.Dimension(50, 50));

        buttonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reconeixedormusica/icones/stop.png"))); // NOI18N
        buttonStop.setBorder(null);
        buttonStop.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonStop.setMinimumSize(new java.awt.Dimension(50, 50));
        buttonStop.setPreferredSize(new java.awt.Dimension(50, 50));

        javax.swing.GroupLayout panelBotonsReproduccioLayout = new javax.swing.GroupLayout(panelBotonsReproduccio);
        panelBotonsReproduccio.setLayout(panelBotonsReproduccioLayout);
        panelBotonsReproduccioLayout.setHorizontalGroup(
            panelBotonsReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotonsReproduccioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonPlayPause, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelBotonsReproduccioLayout.setVerticalGroup(
            panelBotonsReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotonsReproduccioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBotonsReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonPlayPause, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        barraReproduccio.setBackground(new java.awt.Color(102, 102, 102));

        labelTemps.setText("00:00");

        javax.swing.GroupLayout panelBarraReproduccioLayout = new javax.swing.GroupLayout(panelBarraReproduccio);
        panelBarraReproduccio.setLayout(panelBarraReproduccioLayout);
        panelBarraReproduccioLayout.setHorizontalGroup(
            panelBarraReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBarraReproduccioLayout.createSequentialGroup()
                .addContainerGap(229, Short.MAX_VALUE)
                .addComponent(labelTemps)
                .addContainerGap())
            .addComponent(barraReproduccio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
        );
        panelBarraReproduccioLayout.setVerticalGroup(
            panelBarraReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBarraReproduccioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(barraReproduccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(labelTemps)
                .addContainerGap())
        );

        labelCaratula.setText(" ");

        javax.swing.GroupLayout panelCaratulaLayout = new javax.swing.GroupLayout(panelCaratula);
        panelCaratula.setLayout(panelCaratulaLayout);
        panelCaratulaLayout.setHorizontalGroup(
            panelCaratulaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCaratulaLayout.createSequentialGroup()
                .addComponent(labelCaratula, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelCaratulaLayout.setVerticalGroup(
            panelCaratulaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelCaratula, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelReproduccioLayout = new javax.swing.GroupLayout(panelReproduccio);
        panelReproduccio.setLayout(panelReproduccioLayout);
        panelReproduccioLayout.setHorizontalGroup(
            panelReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReproduccioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBarraReproduccio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelReproduccioLayout.createSequentialGroup()
                        .addComponent(panelBotonsReproduccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(panelCaratula, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        panelReproduccioLayout.setVerticalGroup(
            panelReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReproduccioLayout.createSequentialGroup()
                .addComponent(panelBarraReproduccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(panelReproduccioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelBotonsReproduccio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelReproduccioLayout.createSequentialGroup()
                        .addComponent(panelCaratula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        buttonAfegirCanso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reconeixedormusica/icones/afegir.png"))); // NOI18N
        buttonAfegirCanso.setText("Afegir");

        labelNom.setFont(new java.awt.Font("Tahoma", 1, 11));
        labelNom.setText("Nom:");

        labelGrup.setFont(new java.awt.Font("Tahoma", 1, 11));
        labelGrup.setText("Grup:");

        labelAlbum.setFont(new java.awt.Font("Tahoma", 1, 11));
        labelAlbum.setText("Àlbum:");

        labelGenere.setFont(new java.awt.Font("Tahoma", 1, 11));
        labelGenere.setText("Gènere:");

        labelAny.setFont(new java.awt.Font("Tahoma", 1, 11));
        labelAny.setText("Any:");

        labelInfoNom.setText(" -");

        labelInfoGrup.setText(" -");

        labelInfoAlbum.setText(" -");

        labelInfoGenere.setText(" -");

        labelInfoAny.setText(" -");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(127, Short.MAX_VALUE)
                        .addComponent(buttonAfegirCanso))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelAny, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelAlbum, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelGenere, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelGrup, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelNom, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelInfoAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(labelInfoGrup, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(labelInfoNom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(labelInfoGenere, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                            .addComponent(labelInfoAny, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelInfoNom)
                    .addComponent(labelNom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelInfoGrup)
                    .addComponent(labelGrup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelInfoAlbum)
                    .addComponent(labelAlbum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelInfoGenere)
                    .addComponent(labelGenere))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelInfoAny)
                    .addComponent(labelAny))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(buttonAfegirCanso)
                .addContainerGap())
        );

        javax.swing.GroupLayout panelReproductorLayout = new javax.swing.GroupLayout(panelReproductor);
        panelReproductor.setLayout(panelReproductorLayout);
        panelReproductorLayout.setHorizontalGroup(
            panelReproductorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReproductorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelReproduccio, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelReproductorLayout.setVerticalGroup(
            panelReproductorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReproductorLayout.createSequentialGroup()
                .addGroup(panelReproductorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelReproductorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelReproductorLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelReproduccio, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panelComparador.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Comparador"));
        panelComparador.setPreferredSize(new java.awt.Dimension(500, 291));

        panelGrafics.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout panelGraficsLayout = new javax.swing.GroupLayout(panelGrafics);
        panelGrafics.setLayout(panelGraficsLayout);
        panelGraficsLayout.setHorizontalGroup(
            panelGraficsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelGrafics, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
        );
        panelGraficsLayout.setVerticalGroup(
            panelGraficsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelGrafics, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)
        );

        buttonGravar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reconeixedormusica/icones/micro.png"))); // NOI18N
        buttonGravar.setText("Gravar");

        areaProcessos.setColumns(15);
        areaProcessos.setEditable(false);
        areaProcessos.setRows(5);
        jScrollPane2.setViewportView(areaProcessos);

        buttonComparar.setLabel("Comparar");

        labelComparar.setText("Què comparar?");

        comboBoxQueComparar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gravació", "Cançó oberta" }));

        javax.swing.GroupLayout panelGravacioLayout = new javax.swing.GroupLayout(panelGravacio);
        panelGravacio.setLayout(panelGravacioLayout);
        panelGravacioLayout.setHorizontalGroup(
            panelGravacioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGravacioLayout.createSequentialGroup()
                .addComponent(buttonGravar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonComparar, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
            .addGroup(panelGravacioLayout.createSequentialGroup()
                .addComponent(labelComparar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboBoxQueComparar, 0, 124, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
        );
        panelGravacioLayout.setVerticalGroup(
            panelGravacioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGravacioLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(panelGravacioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelComparar)
                    .addComponent(comboBoxQueComparar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelGravacioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(buttonComparar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonGravar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout panelComparadorLayout = new javax.swing.GroupLayout(panelComparador);
        panelComparador.setLayout(panelComparadorLayout);
        panelComparadorLayout.setHorizontalGroup(
            panelComparadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelComparadorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelGrafics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelGravacio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelComparadorLayout.setVerticalGroup(
            panelComparadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelComparadorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelComparadorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelGrafics, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelGravacio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        menuOpcions.setText("Opcions");

        opcioObrirCanso.setText("Obrir cançó");
        opcioObrirCanso.setPreferredSize(new java.awt.Dimension(253, 22));
        menuOpcions.add(opcioObrirCanso);
        menuOpcions.add(jSeparator1);

        opcioObrirJavadoc.setText("Javadoc");
        opcioObrirJavadoc.setPreferredSize(new java.awt.Dimension(253, 22));
        menuOpcions.add(opcioObrirJavadoc);

        opcioObrirManual.setText("Documentació");
        menuOpcions.add(opcioObrirManual);

        opcioInfoPrograma.setText("Sobre el programa");
        menuOpcions.add(opcioInfoPrograma);
        menuOpcions.add(jSeparator2);

        opcioSortirPrograma.setText("Sortir");
        menuOpcions.add(opcioSortirPrograma);

        jMenuBar1.add(menuOpcions);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelLlista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelComparador, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                    .addComponent(panelReproductor, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(panelReproductor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(panelComparador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelLlista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                //new Vista().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaProcessos;
    private javax.swing.JSlider barraReproduccio;
    private javax.swing.JButton buttonAfegirCanso;
    private javax.swing.JButton buttonComparar;
    private javax.swing.JButton buttonEliminarCanso;
    private javax.swing.JButton buttonGravar;
    private javax.swing.JButton buttonPlayPause;
    private javax.swing.JButton buttonStop;
    private javax.swing.JComboBox comboBoxQueComparar;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelAlbum;
    private javax.swing.JLabel labelAny;
    private javax.swing.JLabel labelCaratula;
    private javax.swing.JLabel labelComparar;
    private javax.swing.JLabel labelGenere;
    private javax.swing.JLabel labelGrafics;
    private javax.swing.JLabel labelGrup;
    private javax.swing.JLabel labelInfoAlbum;
    private javax.swing.JLabel labelInfoAny;
    private javax.swing.JLabel labelInfoGenere;
    private javax.swing.JLabel labelInfoGrup;
    private javax.swing.JLabel labelInfoNom;
    private javax.swing.JLabel labelNom;
    private javax.swing.JLabel labelTemps;
    private javax.swing.JMenu menuOpcions;
    private javax.swing.JMenuItem opcioInfoPrograma;
    private javax.swing.JMenuItem opcioObrirCanso;
    private javax.swing.JMenuItem opcioObrirJavadoc;
    private javax.swing.JMenuItem opcioObrirManual;
    private javax.swing.JMenuItem opcioSortirPrograma;
    private javax.swing.JPanel panelBarraReproduccio;
    private javax.swing.JPanel panelBotonsReproduccio;
    private javax.swing.JPanel panelCaratula;
    private javax.swing.JPanel panelComparador;
    private javax.swing.JPanel panelGrafics;
    private javax.swing.JPanel panelGravacio;
    private javax.swing.JPanel panelLlista;
    private javax.swing.JPanel panelReproduccio;
    private javax.swing.JPanel panelReproductor;
    private javax.swing.JTable tableCansons;
    // End of variables declaration//GEN-END:variables

    
    /**
     * Inicia totes les icones que apareixen al programa
     */
    private void setIcones() {
        ImageIcon icona;
        
        icona = new ImageIcon(getClass().getResource("icones/logo.png"));
        this.setIconImage(icona.getImage());
        
        icona = reescalarIcona("/reconeixedormusica/icones/obrir.png", 22);
        opcioObrirCanso.setIcon(icona);
        
        icona = reescalarIcona("/reconeixedormusica/icones/javadoc.png", 22);
        opcioObrirJavadoc.setIcon(icona);
        
        icona = reescalarIcona("/reconeixedormusica/icones/manual.png", 22);
        opcioObrirManual.setIcon(icona);
        
        icona = reescalarIcona("/reconeixedormusica/icones/info.png", 22);
        opcioInfoPrograma.setIcon(icona);
        
        icona = reescalarIcona("/reconeixedormusica/icones/exit.png", 22);
        opcioSortirPrograma.setIcon(icona);
        
        icona = reescalarIcona("/reconeixedormusica/icones/eliminar.png", 18);
        buttonEliminarCanso.setIcon(icona);
        
        icona = reescalarIcona("/reconeixedormusica/icones/afegir.png", 18);
        buttonAfegirCanso.setIcon(icona);
        
        icona = reescalarIcona("/reconeixedormusica/icones/micro.png", 18);
        buttonGravar.setIcon(icona);
        
        icona = reescalarIcona("/reconeixedormusica/icones/comparar.png", 18);
        buttonComparar.setIcon(icona);
        
        caratulaPerDefecte = reescalarIcona("/reconeixedormusica/icones/caratula_per_defecte.png", 100);
        labelCaratula.setIcon(caratulaPerDefecte);
    }
    
    
    /**
     * Reescala una icona donada
     * @param path indica la icona a escalar
     * @param size tamany a obtenir
     * @return icona escalada
     */
    private ImageIcon reescalarIcona(String path, int size) {
        ImageIcon icona = new ImageIcon(getClass().getResource(path));
        Image imatge = icona.getImage();
        Image imatgeAux = imatge.getScaledInstance(size, size, java.awt.Image.SCALE_SMOOTH);
        return new ImageIcon(imatgeAux);
    }
    
    
    /**
     * Asigna el controlador a tots els components que generen un esdeveniment
     */
    private void asignarControladorAlsEsdeveniments() {
        opcioObrirCanso.addActionListener(controlador);
        opcioObrirCanso.setActionCommand("obrir_canso");
        
        opcioObrirJavadoc.addActionListener(controlador);
        opcioObrirJavadoc.setActionCommand("obrir_javadoc");
        
        opcioObrirManual.addActionListener(controlador);
        opcioObrirManual.setActionCommand("obrir_manual");
        
        opcioInfoPrograma.addActionListener(controlador);
        opcioInfoPrograma.setActionCommand("info_programa");
        
        opcioSortirPrograma.addActionListener(controlador);
        opcioSortirPrograma.setActionCommand("sortir");
        
        buttonEliminarCanso.addActionListener(controlador);
        buttonEliminarCanso.setActionCommand("eliminar_canso");
        
        buttonAfegirCanso.addActionListener(controlador);
        buttonAfegirCanso.setActionCommand("afegir_canso");
        
        buttonPlayPause.addActionListener(controlador);
        buttonPlayPause.setActionCommand("play_pause_canso");
        
        buttonStop.addActionListener(controlador);
        buttonStop.setActionCommand("stop_canso");
        
        buttonGravar.addActionListener(controlador);
        buttonGravar.setActionCommand("gravar");
        
        buttonComparar.addActionListener(controlador);
        buttonComparar.setActionCommand("comparar");
    }
    
    
    /**
     * Mostra un JDialog amb informació del programa
     */
    public void mostrarMissatgeSobre() {
        String text = "TÈCNIQUES AVANÇADES DE PROGRAMACIÓ"
                + NEW_LINE
                + NEW_LINE
                + "Autors del programa:"
                + NEW_LINE
                + "     > Bernardo Miquel Riera"
                + NEW_LINE
                + "     > Juan Gabriel Florit Gomila";
        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), text, "Sobre el programa...", 
	JOptionPane.PLAIN_MESSAGE);
    }
    
    
    /**
     * Mostra un JDialog d'alerta a l'usuari
     * @param missatge text que volem mostrar
     */
    public void mostrarMissatgeAlerta(String missatge) {
        JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), missatge, "Alerta", JOptionPane.WARNING_MESSAGE);
    }

    
    /**
     * Inicia la taula
     */
    private void initTaula() {
        //columna any
        TableColumn col = tableCansons.getColumnModel().getColumn(3);
        col.setPreferredWidth(20);
        //columna duració
        col = tableCansons.getColumnModel().getColumn(4);
        col.setPreferredWidth(20);
    }

    
    /**
     * Configura els botons del reproductor d'audio
     */
    private void setBotonsReproductor() {
        buttonPlayPause.setContentAreaFilled(false);
        buttonStop.setContentAreaFilled(false);
        
        //Per defecte:
        setBotoPlayPause(true);
    }
    
    
    /**
     * Asigna la icona que pertoqui (play o pause) segons l'estat del reproductor
     * @param play botó actual
     */
    public void setBotoPlayPause(boolean play) {
        ImageIcon icona;
        if (play) {
            icona = reescalarIcona("/reconeixedormusica/icones/play.png", 64);
        } else {
            icona = reescalarIcona("/reconeixedormusica/icones/pausa.png", 64);
        }
        buttonPlayPause.setIcon(icona);
    }
    
    
    /**
     * Mètode que escriu a l'àrea de processos per així informar a l'usuari
     * @param missatge text que volem mostrar
     */
    public final void informarUsuari(String missatge) {
        areaProcessos.append(" > "+missatge+"\n");
    }
    
    
    /**
     * Desplega el file chooser per a que poguem triar una cançó o directori
     * @param obrirArxiu indica si hem de seleccionar un arxiu o directori
     * @return arxiu o directori seleccionats, null si no s'ha seleccionat res
     */
    public File mostrarFileChooser(boolean obrirArxiu) {
        File f = null;
        
        fileChooser.setCurrentDirectory(new java.io.File("."));//directori actual
        if (!obrirArxiu) {//directori
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        } else {//arxiu
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        }
        
        int resultat = fileChooser.showOpenDialog(this);
        if (resultat == JFileChooser.APPROVE_OPTION) {
            f = fileChooser.getSelectedFile();
        }
        
        return f;
    }
    
    
    /**
     * Mostra la metadata d'un fitxer d'audio a la interficie
     * @param nom
     * @param grup
     * @param album
     * @param genere
     * @param any
     * @param caratula 
     */
    public void setInfoMetadata(String nom, String grup, String album, String genere, String any, Image caratula) {
        labelInfoNom.setText(nom);
        labelInfoGrup.setText(grup);
        labelInfoAlbum.setText(album);
        labelInfoGenere.setText(genere);
        labelInfoAny.setText(any);
        
        ImageIcon imgAux;
        if (caratula == null) {
            //Intentam cercar la caràtula en local:
            String path = "/reconeixedormusica/portades/" + album + ".jpg";
            System.out.println(path);
            try {
            imgAux = reescalarIcona(path, 100);
            } catch (NullPointerException ex) {
                imgAux = caratulaPerDefecte;
            }
            //Si tot i així no hi és, assignam caràtula per defecte
            if (imgAux == null) imgAux = caratulaPerDefecte;
        } else {
            imgAux = new ImageIcon(caratula);
        }
        labelCaratula.setIcon(imgAux);
    }
    
    
    /**
     * Actualitza la barra de reproducció: JSlider i comptador temps
     * @param segonsTranscorreguts temps de reproducció actual (en segons)
     * @param duracioTotal duració total de la cançó (en segons)
     */
    public void updateBarraReproduccio(int segonsTranscorreguts, int duracioTotal) {
        //Actualitzam temps:
        int minuts = segonsTranscorreguts / 60;
        int segons = segonsTranscorreguts % 60;
        //El format del comptador és "00:00"
        String afegitMinuts = "";
        if (minuts < 10) afegitMinuts = "0";
        String afegitSegons = "";
        if (segons < 10) afegitSegons = "0";
        this.labelTemps.setText(afegitMinuts + minuts + ":" + afegitSegons + segons);
        
        //Actualitzam slider:
        if (duracioTotal != -1) {//conveni: si duracioTotal=-1 no actualitzam
            barraReproduccio.setMaximum(duracioTotal);
        }
        barraReproduccio.setValue(segonsTranscorreguts);
        
        //Miram si ja ha acabat sa cançó:
        if (segonsTranscorreguts == duracioTotal) {
            setBotoPlayPause(true);
        }
    }

    
    /**
     * Inicialitzam la barra de reproducció
     */
    private void initBarraReproduccio() {
        barraReproduccio.setSnapToTicks(true);
        barraReproduccio.setMinimum(0);
        barraReproduccio.setMajorTickSpacing(1);
        barraReproduccio.setValue(0);
    }
    
    
    /**
     * Actualitzam la taula de la interficie on es mostren totes les cançons de la BBDD
     * @param llistaCansons cançons dins la BBDD
     */
    public final void actualitzarTaulaCansons(ArrayList<Canso> llistaCansons) {
        DefaultTableModel model = (DefaultTableModel) tableCansons.getModel();
        model.setRowCount(0);
        for (int i=0; i<llistaCansons.size(); i++) {
            Canso c = llistaCansons.get(i);
            model.insertRow(i, new Object[]{c.getNom(), c.getGrup(), c.getAlbum(), c.getAny(), c.getDuracio()});
        }
    }
    
    
    /**
     * Torna la cançó seleccionada a la taula de cançons de la BBDD
     * @return cançó seleccionada (null si no n´hi ha cap)
     */
    public Canso getCansoSeleccionada() {
        DefaultTableModel model = (DefaultTableModel) tableCansons.getModel();
        if (model.getRowCount() != 0) {
            int files[] = tableCansons.getSelectedRows();
            if (files.length != 0) {
                    
                String titol = (String) model.getValueAt(files[0], 0);
                String grup = (String) model.getValueAt(files[0], 1);
                String album = (String) model.getValueAt(files[0], 2);
                String any = (String) model.getValueAt(files[0], 3);
                String duracio = (String) model.getValueAt(files[0], 4);

                return new Canso("", titol, grup, album, any, duracio);
            } else {
                mostrarMissatgeAlerta("Primer has de seleccionar una cançó");
                return null;
            }
        } else {
            mostrarMissatgeAlerta("No hi ha cap cançó per eliminar");
            return null;
        }
    }
    
    
    /**
     * Indica si l'usuari ha seleccionat fer la comparació dels datapoint's de
     * la BBDD amb una gravació feta per ell o bé amb l'arxiu d'audio que ha triat
     * @return 
     */
    public boolean compararGravacio() {
        if (comboBoxQueComparar.getSelectedIndex() == 0) {//gravació
            return true;
        } else {//cançó oberta
            return false;
        }
    }
    
    
    /**
     * Si en el procès de comparació s'ha trobat una coincidencia, marcam la
     * cançó a la taula amb la llista de cançons de la BBDD per donar feedback
     * a l'usuari.
     * @param c cançó trobada com a coincidencia
     */
    public void marcarCansoTrobada(Canso c) {
        DefaultTableModel model = (DefaultTableModel) tableCansons.getModel();
        int i = 0;
        boolean trobada = false;
        while (i<model.getRowCount() && !trobada) {
            
            String nomAux = (String) model.getValueAt(i, 0);
            String grupAux = (String) model.getValueAt(i, 1);
            String albumAux = (String) model.getValueAt(i, 2);
            String anyAux = (String) model.getValueAt(i, 3);
            String duracioAux = (String) model.getValueAt(i, 4);
            Canso cAux = new Canso("", nomAux, grupAux, albumAux, anyAux, duracioAux);
            
            if (controlador.sonIguals(c, cAux)) {
                trobada = true;
                //seleccionam la fila que es correspon amb la cançó
                tableCansons.setRowSelectionInterval(i, i);
            }
            i++;
        }
    }

    
    /**
     * Get del label on es pinten els gràfics
     * @return label
     */
    public JLabel getLabelGrafics() {
        return labelGrafics;
    }
    
}